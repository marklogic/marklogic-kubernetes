{{- $groupDict := dict -}}
{{- $newGroupName := .Values.group.name }}
{{- $newClusterName := include "marklogic.clusterName" . -}}
{{- $newFqdn := include "marklogic.fqdn" . -}}
{{- $existingSTS := (lookup "apps/v1" "StatefulSet" "" "" ).items }}
{{- range $key, $v := $existingSTS -}}
  {{- $v := $v.metadata.annotations -}}
  {{- $appName := get $v "app.kubernetes.io/name" -}}
  {{- $fqdn := get $v "marklogic.com/fqdn" -}}
  # {{- $fqdn }}
  {{- if and (eq $appName "marklogic") (ne $newFqdn $fqdn) -}}
    {{- $groupName := get $v "marklogic.com/group-name" }}
    {{- $clusterName := get $v "marklogic.com/cluster-name" -}}
    {{- if hasKey $groupDict $clusterName }}
      {{- $currentList := get $groupDict $clusterName -}}
      {{- $newList := append $currentList $groupName -}}
      {{- $groupDict = merge (dict $clusterName $newList) $groupDict -}}
    {{- else }}
      {{- $groupDict = merge (dict $clusterName (list $groupName)) $groupDict -}}
    {{- end}}
  {{- end}}
{{- end }}
# {{- $groupDict -}}
{{- if hasKey $groupDict $newClusterName -}}
  {{- $groupNames := get $groupDict $newClusterName -}}
  # {{- $groupNames -}}
  {{- if has $newGroupName $groupNames }}
    {{- $errorMessage := printf "You current deployment's group name \"%s\" is already in the cluster, please choose another group name" $newGroupName -}}
    {{- fail $errorMessage -}}
  {{- end }}
{{- end }}

{{- include "marklogic.checkUpgradeError" . -}}
{{- include "marklogic.checkInputError" . }}
{{- include "marklogic.rootToRootlessUpgrade" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "marklogic.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "marklogic.labels" . | nindent 4 }}
  annotations:
    {{- include "marklogic.annotations" . | nindent 4 }}

spec:
  serviceName: {{ include "marklogic.headlessServiceName" . }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      {{- include "marklogic.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "marklogic.selectorLabels" . | nindent 8 }}
      annotations:
        {{- toYaml .Values.podAnnotations | nindent 8 }}
    spec:
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "marklogic.serviceAccountName" . }}
      automountServiceAccountToken: false
      {{- with .Values.affinity }}
      affinity: {{- toYaml . | nindent 8}}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- toYaml . | nindent 6}}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriod }}
      initContainers: 
      {{- if eq .Values.tls.enableOnDefaultAppServers true }}
      - name: copy-certs
        image: {{ .Values.initContainers.utilContainer.image | quote }}
        imagePullPolicy: {{ .Values.initContainers.utilContainer.pullPolicy | quote }}
        command: ["/bin/sh", "/tmp/helm-scripts/copy-certs.sh"]
        volumeMounts:
        {{- if .Values.tls.certSecretNames }}
          - name: ca-cert-secret
            mountPath: /tmp/ca-cert-secret/
          - name: server-cert-secrets
            mountPath: /tmp/server-cert-secrets/
        {{- end }}
          - name: certs
            mountPath: /run/secrets/marklogic-certs/
          - name: mladmin-secrets
            mountPath: /run/secrets/ml-secrets/
            readOnly: true
          - name: helm-scripts
            mountPath: /tmp/helm-scripts   
        env: 
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MARKLOGIC_ADMIN_USERNAME_FILE
          value: "ml-secrets/username"
        - name: MARKLOGIC_ADMIN_PASSWORD_FILE
          value: "ml-secrets/password"
        envFrom:
        - configMapRef:
            name: {{ include "marklogic.fullname" . }}
      {{- end }}
      {{- if eq .Values.rootToRootlessUpgrade true }}
      - name: root-rootless-upgrade
        image: {{ .Values.initContainers.utilContainer.image | quote }}
        imagePullPolicy: {{ .Values.initContainers.utilContainer.pullPolicy | quote }}
        command: ["/bin/sh", "/tmp/helm-scripts/root-rootless-upgrade.sh"]
        volumeMounts:
          - name: datadir
            mountPath: /var/opt/MarkLogic
          {{- if .Values.additionalVolumeMounts }}
          {{- toYaml .Values.additionalVolumeMounts | nindent 10 }}
          {{- end }}
          - name: helm-scripts
            mountPath: /tmp/helm-scripts
      {{- end }}
      containers:
        - name: marklogic-server
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy}}
          volumeMounts:
            - name: datadir
              mountPath: /var/opt/MarkLogic
            {{- if .Values.additionalVolumeMounts }}
              {{- toYaml .Values.additionalVolumeMounts | nindent 12 }}
            {{- end }}
            - name: mladmin-secrets
              mountPath: /run/secrets/ml-secrets
              readOnly: true
            {{- if .Values.tls.enableOnDefaultAppServers }}
            - name: certs
              mountPath: /run/secrets/marklogic-certs/
            {{- end }}
            {{- if .Values.hugepages.enabled }}
            - name: huge-pages
              mountPath: {{ .Values.hugepages.mountPath }}
            {{- end }} 
            - name: helm-scripts
              mountPath: /tmp/helm-scripts   
          env:
            - name: MARKLOGIC_ADMIN_USERNAME_FILE
              value: "ml-secrets/username"
            - name: MARKLOGIC_ADMIN_PASSWORD_FILE
              value: "ml-secrets/password"
            {{- if .Values.auth.walletPassword }}
            - name: MARKLOGIC_WALLET_PASSWORD_FILE
              value: ml-secrets/wallet-password
            {{- end }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                    fieldPath: metadata.name
            - name: INSTALL_CONVERTERS
              value: {{ .Values.enableConverters | quote }}
            - name: LICENSE_KEY
              value: {{ .Values.license.key | quote }}
            - name: LICENSEE
              value: {{ .Values.license.licensee | quote }}
            - name: REALM
              value: {{ .Values.realm  | quote }}
            - name:  MARKLOGIC_GROUP
              value: {{ .Values.group.name }}
          envFrom:
            - configMapRef:
                name: {{ include "marklogic.fullname" . }}
          ports:
            - name: health-check
              containerPort: 7997
              protocol: TCP
            - name: xdqp-port1
              containerPort: 7998
              protocol: TCP
            - name: xdqp-port2
              containerPort: 7999              
              protocol: TCP
            - name: app-services
              containerPort: 8000
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP
            - name: manage
              containerPort: 8002
              protocol: TCP
            {{- if .Values.additionalContainerPorts }}
              {{- toYaml .Values.additionalContainerPorts | nindent 12 }}
            {{- end }}
          lifecycle:
            postStart:
              exec:
                command: ["/bin/bash", "/tmp/helm-scripts/poststart-hook.sh"]
            preStop:
              exec:
                command: ["/bin/bash", "/tmp/helm-scripts/prestop-hook.sh"]
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: 8001
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: health-check
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- with .Values.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- if .Values.logCollection.enabled }}
        - name: fluent-bit
          image: {{ .Values.logCollection.image }}
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: datadir
              mountPath: /var/opt/MarkLogic
            {{- if .Values.additionalVolumeMounts }}
              {{- toYaml .Values.additionalVolumeMounts | nindent 12 }}
            {{- end }}
            - name: {{ include "marklogic.fullname" . }}-fb-config-map
              mountPath: /fluent-bit/etc/
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          resources: {{- toYaml .Values.logCollection.resources | nindent 12 }}
        {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8}}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets: {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      dnsConfig:
        searches:
          - {{ include "marklogic.headlessURL" . }}
      volumes:
        {{- if .Values.tls.enableOnDefaultAppServers }}
        - name: certs
          emptyDir: {}
        {{- if .Values.tls.certSecretNames }}
        - name: ca-cert-secret
          secret:
            secretName: {{ .Values.tls.caSecretName }}
        - name: server-cert-secrets
          projected:
            sources:
            {{-  range $i, $secretName := .Values.tls.certSecretNames }}
              - secret:
                  name: {{ $secretName | quote }}
                  items: 
                    - key: tls.crt
                      path: tls_{{$i}}.crt
                    - key: tls.key
                      path: tls_{{$i}}.key
            {{- end }}
        {{- end }}
        {{- end }}
        - name: mladmin-secrets
          secret:
            secretName: {{ include "marklogic.authSecretNameToMount" . }}
        - name: scripts
          configMap:
            name: {{ include "marklogic.fullname" . }}-scripts
            defaultMode: 0755
        {{- if .Values.logCollection.enabled }}
        - name: {{ include "marklogic.fullname" . }}-fb-config-map
          configMap:
            name: {{ include "marklogic.fullname" . }}-fb-config-map
        {{- end }}
        {{- if .Values.hugepages.enabled }}
        - name: huge-pages
          emptyDir:
            medium: HugePages
        {{- end }}  
        {{- if not .Values.persistence.enabled }}
        - name: datadir
          emptyDir: {}
        {{- end }}
        - name: helm-scripts
          configMap:
            name: {{ include "marklogic.fullname" . }}-scripts
            defaultMode: 0755
        {{- if .Values.additionalVolumes }}
        {{- toYaml .Values.additionalVolumes | nindent 8 }}
        {{- end }}
  {{- if or .Values.persistence.enabled .Values.additionalVolumeClaimTemplates }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        labels: 
          {{- include "marklogic.selectorLabels" . | nindent 10 }}
        {{- if .Values.persistence.annotations }}
        annotations:
          {{- toYaml .Values.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote}}
          {{- end }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end}}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
    {{- if .Values.additionalVolumeClaimTemplates }}
    {{- toYaml .Values.additionalVolumeClaimTemplates | nindent 4 }}
    {{- end }}
  {{- end }}