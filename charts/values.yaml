## Default values for marklogic server.

## Number of Marklogic nodes
replicaCount: 1

## update strategy for MarkLogic and Helm chart upgrades
## It is recommended to use OnDelete updateStrategy as MarkLogic bootstrap host (pod-0) needs to be upgraded first in the cluster
## and OnDelete allows more control over the upgrade and recovery in case of failure.
updateStrategy:  
    type: OnDelete

## Termination Grace Period
terminationGracePeriod: 120

## Kubernetes cluster domain name
clusterDomain: cluster.local

## Allow deployment with hostname over 64 characters
## This is not remmended as it may cause issues when turning on TLS on MarkLogic Server
## Because MarkLogic Server only supports using CN as hostname in the certificate
## There is a limit of 64 characters for CN in the certificate
allowLongHostnames: false

## This flag facilitates upgrading from version 1.0.x of the chart while retaining the use of legacy hostnames. 
## When upgrading from version 1.0.x to any version above 1.1.0, this flag must be set to true.
## It should remain true for all future upgrades. For new installations, this flag should be set to false.
useLegacyHostnames: false

# -- Annotations for the all deployed pods
podAnnotations: {}

## Group related settings
group:
  ## the group name of the current Marklogic Helm Deployment
  name: Default
  ## xdqp encryption for intra cluster network traffic
  enableXdqpSsl: true

## The name of the host to join. If not provided, the deployment is a bootstrap host.
bootstrapHostName: ""

## Flag to enable to migrate from MarkLogic root to rootless image
rootToRootlessUpgrade: false

## Marklogic image parameters
image:
  repository: progressofficial/marklogic-db
  tag: 11.3.0-ubi-rootless
  pullPolicy: IfNotPresent

## Init container image parameters
initContainers:
  utilContainer:
    image: "redhat/ubi9:9.4"
    pullPolicy: IfNotPresent

## Configure the imagePullSecrets to pull the image from private repository that requires credential
imagePullSecrets: []
# - name: "your-secret-name-1"
# - name: "your-secret-name-2"


## Manage HugePages
## ref: https://v1-23.docs.kubernetes.io/docs/tasks/manage-hugepages/scheduling-hugepages/
  #####################################################
  ## NOTE : MarkLogic only supports 2Mi huge pages   ##
  #####################################################
hugepages:
  enabled: false
  mountPath: /dev/hugepages

## Marklogic pods' resource requests and limits
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ################################################################
  ## NOTE : When using huge pages requests should equal limits  ##
  ################################################################
resources: {}
#   requests:
#     memory: "3000Mi"
#     cpu: "1000m"
#     hugepages-2Mi: 1Gi
#   limits:
#     memory: "3000Mi"
#     cpu: "1000m"
#     hugepages-2Mi: 1Gi

nameOverride: ""
fullnameOverride: ""

## Configure Marklogic Admin Username and Password. Create a secret and specify the name via "secretName"
## with the following keys:
##   * username
##   * password
##   * wallet-password
## 
## If no secret is specified and the admin credentials are not provided, a secret will be automatically
## generated with random admin and wallet passwords.
auth:
  secretName: ""
#  adminUsername: "admin"
#  adminPassword: ""
#  walletPassword: ""

## Configure TLS for default App Servers(8000, 8001, 8002)
## If certSecretNames is not provided, self-signed temporary certificate will be generated.
tls:
  enableOnDefaultAppServers: false
  certSecretNames: []
  caSecretName: ""

## Optionally install converters package on MarkLogic
enableConverters: false

## Supply license information for MarkLogic server
license:
  key: ""
  licensee: ""

## Configure Affinity property for scheduling pods to nodes
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## Configure POD Topology Spread Constraints to spread pods across cluster
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
## Preferred Topology Spread Constraints rule to evenly distribute Marklogic pods across worker nodes and zones
topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: marklogic
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: ScheduleAnyway
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: marklogic

## Configure NodeSelector property for scheduling pods to nodes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/#create-a-pod-that-gets-scheduled-to-your-chosen-node
nodeSelector: {}
  # disktype: ssd

## Configure persistence using persistent Volume Claim
## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
## The "" storageClass will use the default storage class for your cluster. (gp2 for EKS, standard for Minikube)
## If set the enabled to false, it will use EmptyDir volume
persistence:
  enabled: true
  storageClass: ""
  size: 10Gi
  annotations: {}
  accessModes:
    - ReadWriteOnce

## Specify additional list of persistent volume claims
additionalVolumeClaimTemplates: []
  # - metadata:
  #     name: "logsdir"
  #     annotations: {}
  #   spec:
  #     accessModes:
  #       - ReadWriteOnce
  #     storageClassName: ""
  #     resources:
  #       requests:
  #         storage: 10Gi

## specify additional list of volumes
additionalVolumes: []
# - name: "logsdir"
#   emptyDir: {}

## specify additional list of volumeMounts
additionalVolumeMounts: []
# - name: "logsdir"
#   mountPath: "/var/opt/MarkLogic/Logs"

## Container listener port configuration
## ref: https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/

#########################################################################################
## WARNING: Changing additionalContainerPorts on an existing cluster requires a pod    ##
## restart to take effect. This setting does not need to be changed under normal       ##
## circumsatances though. To expose new ports for MarkLogic app servers, use           ##
## service.additionalPorts. When the updateStrategy is set to OnDelete (the default),  ##
## this must be done manually. If the updateStrategy is changed to RollingUpdate (not  ##
## recommented), changing the additionalContainerPorts will trigger a rolling update   ##
## of the StatefulSet.                                                                 ##
#########################################################################################

## @param additionalContainerPorts. Additional container ports 
additionalContainerPorts: []
# - name: app1
#   containerPort: 8010
#   protocol: TCP


## Configure the Service to access Marklogic Clusters
service:
  ## Service annotations
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  annotations: {}
  ## service type ould be ClusterIP, NodePort or LoadBalancer
  type: ClusterIP
  ## Service listener port configuration
  ## ref: https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/
  #######################################################################################
  ## NOTE : When adding new app servers to MarkLogic, the new app server ports must    ##
  ## also be added to the additionalPorts parameter to expose the ports via the        ##
  ## kubernetes service.                                                               ##
  #######################################################################################
  ## @param service.additionalPorts. Additional service ports 
  additionalPorts: []
  # - name: app1
  #   port: 8010 
  #   targetPort: 8010
  #   protocol: TCP

serviceAccount:
  ## Specifies whether a service account should be created
  create: true
  ## Annotations to add to the service account
  annotations: {}
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  name: ""

## Configure priority class for pods 
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
priorityClassName:  ""

## Configure options for network policy
## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies
networkPolicy:
  enabled: false
  podSelector: {}
    # matchLabels:
      # app: marklogic
  policyTypes: []
    # - Ingress
    # - Egress
  # ingress: 
  #   - from:
  #     - ipBlock:
  #         cidr: ""
  #         except: []
  #     - namespaceSelector:
  #         matchLabels:
  #           project: marklogic
  #     - podSelector:
  #         matchLabels:
  #           role: frontend
  #   ## The endPort should be the last port exposed by an App Server
  #     ports: 
  #     # - port: 8000
  #       # endPort: 8020
  #       protocol: TCP
  # egress: 
  #   - to:
  #     - ipBlock:
  #         cidr: ""
  #     ports:
  #     - protocol: TCP
  #       port: 8000
    
## Below are the security configuration at POD level, by default security will be enabled
## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#configure-volume-permission-and-ownership-change-policy-for-pods
  #######################################################################################
  ## NOTE : The POD Security context should be set when using additional volume.       ##
  ## This will ensure that additional volume created is set with the right ownership.  ##
  #######################################################################################

podSecurityContext:
  enabled: true
  ## group id of user owning the MarkLogic service
  fsGroup: 2 
  fsGroupChangePolicy: "OnRootMismatch" 

## Below are the security configurations for markLogic container, by default security will be enabled
containerSecurityContext:
  enabled: true
  runAsUser: 1000
  runAsNonRoot: true
  allowPrivilegeEscalation: false

## Below are the advanced configurations, please read the reference in detail before making changes

## Configure options for liveness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-http-request
livenessProbe:
  enabled: true
  initialDelaySeconds: 300
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 15
  successThreshold: 1

## Configure options for readiness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes

################################################################
## NOTE: See Limitations and known Issues in the README file  ##
################################################################

readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

## Configure options for log collection
## Log collection will collect all logs for each file type enabled, parse them, 
## And export them to a logging backend specified in the outputs section below
logCollection:
  enabled: false
  # image: fluent/fluent-bit:3.1.1
  # resources:
  #   requests:
  #     cpu: "100m"
  #     memory: "128Mi"
  #   limits:
  #     cpu: "100m"
  #     memory: "128Mi"
#   files:
#     errorLogs: true
#     accessLogs: true
#     requestLogs: true
#     crashLogs: true
#     auditLogs: true
  ## Configure desired output
  ## Documentation on how to set up output can be found here: https://docs.fluentbit.io/manual/pipeline/outputs
  # outputs: |-
      # [OUTPUT]
      #   name loki
      #   match *
      #   host loki.default.svc.cluster.local
      #   port 3100
      #   labels job=fluent-bit
      #   http_user admin
      #   http_passwd admin

## Configuration for the HAProxy load balancer
## An out of box load balancer with configured to handle cookie based session affinity that required by most MarkLogic applications.
## It also support multi-statement transaction and ODBC connections.  
haproxy:
  enabled: false

  ## Name of an existing configmap with configuration for HAProxy
  existingConfigmap: marklogic-haproxy

  ## Number of HAProxy Deployment
  replicaCount: 2

  ## Automatically Roll Deployments for every helm upgrade even there is no change to configMap.
  ## ref: https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments
  restartWhenUpgrade:
    enabled: true

  ## Stats page for HAproxy
  ## ref: https://www.haproxy.com/blog/exploring-the-haproxy-stats-page/
  stats:
    enabled: false
    port: 1024
    auth:
      enabled: false
      username: ''
      password: ''

  ## The service type of the HAproxy Load Balancer. Could be ClusterIP or LoadBalancer.
  service:
    ##  Default is ClusterIP which worked as Internal Load Balancer. Set to LoadBalancer type to expose to public internet. 
    type: ClusterIP

# Used if MarkLogic Default APP-Servers are meant to be exposed under subpath different from /

#######################################################################
#  IMPORTANT NOTE:                                                    #
#  This feature is only supported with MarkLogic 11.1 and higher.     #
#  See Limitations and known Issues in the README file.               #
#######################################################################

  pathbased: 
    enabled: false

# This the default listening port in the Front-End section of the HAProxy when using Path based routing
  frontendPort: 443


# Path and port used on HAProxy 
# The same path will be used on Ingress for Default AppServers 

  defaultAppServers:
    appservices:
      path: /console
      port: 8000
    admin:
      path: /adminUI
      port: 8001
    manage:
      path: /manage
      port: 8002


  ## HTTP Ports, load balancing type and path configuration for HAproxy
  ## HTTP: HTTP(Layer 7) proxy mode. This works for most of the App Servers handling HTTP connections. 
  ## path : define the path to be used to expose the APP-Server on HAProxy and Ingress

  ## To add new ports to be exposed using HTTP just uncoment the following lines and adapt the configuration

  # additionalAppServers:    
  #   - name: dhf-jobs
  #     type: HTTP
  #     port: 8010
  #     targetPort: 8010
  #     path: /DHF-jobs
  #   - name: dhf-final
  #     type: HTTP
  #     port: 8011
  #     targetPort: 8011
  #     path: /DHF-final

  ## TCP Ports, load balancing configuration for HAproxy
  ## TCP: TCP(Layer 4) proxy mode. This works for the MarkLogic App Servers handling TCP connections like ODBC.   

  tcpports:
  # TCP port has to be explicitely enabled
    enabled: false
    # ports:
    #   - name: odbc
    #     type: TCP
    #     port: 5432


  # Timeout configuration for HAProxy. It is recommended to set the same timeout on HAproxy as it is on MarkLogic App-Server (default to 600 second).
  # ref: https://www.haproxy.com/blog/the-four-essential-sections-of-an-haproxy-configuration#timeout-connect-timeout-client-timeout-server
  timeout:
    client: 600s
    connect: 600s
    server: 600s

  ## Configure TLS for HAProxy
  ## Put the PEM-formatted SSL certificate into a secret and provide the secret name in the secretName field.
  ## The PEM-formatted SSL certificate should contain the private key and the certificate. For example: cat certificate.pem private-key.pem > mycert.pem
  ## To generate the secret in Kubernetes: kubectl create secret generic tls-cert --from-file=mycert.pem
  tls:
    enabled: false
    secretName: "" # tls-cert
    ## The name of the certificate file in the secret.
    certFileName: "" # mycert.pem

  ## Node labels for HAProxy pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  nodeSelector: {}

  ## Node Affinity for pod-node scheduling constraints
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  ## Compute Resources
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  resources:
    requests:
      cpu: 250m
      memory: 128Mi
    # limits:
    #   cpu: 250m
    #   memory: 128Mi

## Configure Ingress

#######################################################################
#  IMPORTANT NOTE:                                                    #
#  Ingress is only supported with MarkLogic 11.1 and higher.          #
#  See Limitations and known Issues in the README file.               #
#######################################################################

## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false

  ## Ingress class
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class
  className: ""

  ## Ingress labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  labels: {}
    # app.kubernetes.io/instance: marklogic
    # app.kubernetes.io/name: ml

  ## Ingress annotations
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  annotations: {}
    # alb.ingress.kubernetes.io/healthcheck-port: '443'
    # alb.ingress.kubernetes.io/healthcheck-path: /adminUI
    # alb.ingress.kubernetes.io/success-codes: '200-401'
    # alb.ingress.kubernetes.io/load-balancer-name: ml
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    # alb.ingress.kubernetes.io/target-group-attributes: load_balancing.algorithm.type=least_outstanding_requests
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:XXXXXXXXXXX:certificate/XxXXXXXX-xxxx-XXXX-XXXX-XXXXXXXxxxxXXX
    # alb.ingress.kubernetes.io/target-type: ip
    # alb.ingress.kubernetes.io/group.name: ml-group
    # alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=600,routing.http.xff_header_processing.mode=append

  ## Ingress hosts
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules

  host: ""
  additionalHost: ""
  

  ## Ingress TLS
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  tls:
      []
      # - secretName: your-certificate-name
      #   hosts:
      #     - marklogic.example.com